##################################################################################
# Description
##################################################################################
# This script is a re-write of the GSI utilities GSI_cost_gradient.ncl
# in Python to be use with the companion proc_GSI_cost_gradient.py.  This will
# load the dataframe generated by the processing script and plot the time series
# of values for the cost function and the norm of the cost function gradient
# across the analysis times and the two outer-loops of the GSI analysis.
#
# The range of fort.220 files will be pre-processed into a Pandas dataframe
# and this plotting script should point to the output of the preprocessing script
# for the input file.
#
# The dataframes are saved into a Pickled dictionary organized by domain number
# 'd0X', with the dataframe columns given as 
#
#    'step' : Index of the number of GSI steps, from first analysis
#    'date' : Crurent analysis date time
#    'loop' : Outter-loop index for the optimization in GSI
#    'iter' : Iteration of the current loop in GSI
#    'cost' : Cost function return value in current iteration
#    'grad' : Gradient norm return value in the current iteration
#
# Data input and plot output directories should be defined in the below along
# with MAX_DOM to control the number of domains processed.  Testing on more
# than one domain is still pending.
#
##################################################################################
# License Statement
##################################################################################
#
# Copyright 2022 Colin Grudzien, cgrudzien@ucsd.edu
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#     http://www.apache.org/licenses/LICENSE-2.0
# 
#     Unless required by applicable law or agreed to in writing, software
#     distributed under the License is distributed on an "AS IS" BASIS,
#     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#     See the License for the specific language governing permissions and
#     limitations under the License.
# 
##################################################################################
# imports and exports
import numpy as np
import pandas as pd
import pickle
import datetime
from matplotlib import pyplot as plt

##################################################################################
# define script parameters
PROJ_ROOT = '/cw3e/mead/projects/cwp130/scratch/cgrudzien/GSI-WRF-Cycling-Template/Valentine-Case/3D-EnVAR'
DATA_ROOT = PROJ_ROOT + '/data/analysis'

# starting date and zero hour of data
START_DATE = '2019-02-11T00:00:00'

# final date and zero hour of data
END_DATE = '2019-02-11T00:00:00'

# define domain to plot
DOM = 1

# define the input and output names
IN_PATH = DATA_ROOT + 'GSI_cost_grad_anl_' + START_DATE + '_to_' + END_DATE + '.txt'
OUT_PATH = DATA_ROOT + 'GSI_cost_grad_anl_d0' + DOM + '_' + START_DATE + '_to_' + END_DATE + '.png'

##################################################################################
# load and plot data
f = open(IN_PATH, 'rb')
data = pickle.load(f)
f.close()

# load dataframe
exec('data = data[\'d0%s\']'%DOM)

# define three panel figure with pre-defined size
fig = plt.figure(figsize=(16,8))
ax0 = fig.add_axes([.038, .10, .28, .8])
ax1 = fig.add_axes([.360, .10, .28, .8])
ax2 = fig.add_axes([.682, .10, .28, .8])

# set colors and storage for looping
line_colors = ['#d95f02', '#7570b3', '#1b9e77']
line_list = []
line_labs = []

for i in range(1, MAX_DOM + 1):
    # generate lines, saving values for legend
    exec('l%s, = ax0.plot(d0%s[\'xtime\'], d0%s[\'dpsdt\'],'%(i,i,i) +
            'linewidth=2, markersize=26, color=line_colors[%s])'%(i-1))
    
    exec('ax1.plot(np.array(d0%s[\'xtime\']), d0%s[\'dmudt\'],'%(i,i) + 
            'linewidth=2, markersize=26, color=line_colors[%s])'%(i-1))
    
    exec('ax2.plot(d0%s[\'xtime\'], d0%s[\'maxdmu\'],'%(i,i) +
            'linewidth=2, markersize=26, color=line_colors[%s])'%(i-1))
    
    exec('line_list.append(l%s)'%i)
    exec('line_labs.append(\'d0%s\')'%(i))

##################################################################################
# define display parameters

#plot bounds
ax0.set_ylim([0,120])
ax1.set_ylim([0,20])
ax2.set_ylim([0,0.008])

title = 'Simulation minute'

# tick parameters
ax0.tick_params(
    labelsize=11,
    )

ax1.tick_params(
    labelsize=11,
    )

ax2.tick_params(
    labelsize=11,
    )

# add legend and sub-titles
fig.legend(line_list, line_labs, fontsize=18, ncol=4, loc='upper center')
plt.figtext(.31, .88, r'$\frac{\mathrm{d}ps}{\mathrm{d}t}$hPa/3hr',
        horizontalalignment='right', verticalalignment='top', fontsize=22)
plt.figtext(.63, .88, r'$\frac{\mathrm{d}\mu}{\mathrm{d}t}$mb/3hr',
        horizontalalignment='right', verticalalignment='top', fontsize=22)
plt.figtext(.95, .88, r'Max $\Delta \mu$', horizontalalignment='right',
        verticalalignment='top', fontsize=22)

# add maain title
plt.figtext(.50, .015, title, horizontalalignment='center',
        verticalalignment='center', fontsize=22)

# save figure and display
plt.savefig(OUT_PATH)
plt.show()

