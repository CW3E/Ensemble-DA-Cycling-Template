##################################################################################
# Description
##################################################################################
# This script is to automate downloading GEFS perturbation data for WRF
# initialization over arbitrary date ranges hosted in the ECMWF TIGGE repository.
# If you don't already, please register for an ECMWF account in order to download
# data from the TIGGE database. 
# 
#     https://confluence.ecmwf.int/display/WEBAPI/Access+ECMWF+Public+Datasets
# 
# Install ECMWF api key in your home area by putting api key in ~/.ecmwfapirc,
# generated by the account creatiion above.
#
# This script is based on original source shared by Rachel Weihs and Caroline
# Papadopoulos.  Dates are specified in iso format in the global parameters for
# the script below. Other options specify the frequency of forecast outputs,
# time between zero hours and the max forecast hour for any zero hour.
#
##################################################################################
# License Statement:
##################################################################################
#
# Copyright 2022 Colin Grudzien, cgrudzien@ucsd.edu
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#     http://www.apache.org/licenses/LICENSE-2.0
# 
#     Unless required by applicable law or agreed to in writing, software
#     distributed under the License is distributed on an "AS IS" BASIS,
#     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#     See the License for the specific language governing permissions and
#     limitations under the License.
# 
##################################################################################
# Imports
##################################################################################
import os, sys, ssl
import calendar
import glob
from datetime import datetime as dt
from datetime import timedelta
from ecmwfapi import ECMWFDataServer
from download_utilities import PROJ_ROOT, STR_INDT, get_reqs

##################################################################################
# SET GLOBAL PARAMETERS 
##################################################################################
# starting date and zero hour of data
START_DATE = '2019-02-08T18:00:00'

# final date and zero hour of data
END_DATE = '2019-02-08T18:00:00'

# interval of forcast data outputs after zero hour
FCST_INT = 6

# number of hours between zero hours for forecast data
CYCLE_INT = 6

# max forecast lenght in hours
MAX_FCST = 6

# max ensemble size to download from perturbations
N_ENS = 20

# dowload control solution True / False
CTR=False

# root directory where date stamped sub-directories will collect data downloads
DATA_ROOT = PROJ_ROOT +\
    '/GSI-WRF-Cycling-Template/Valentine-Case/3D-EnVAR/data/static/gribbed/GEFS'

##################################################################################
# UTILITY METHODS
##################################################################################

def get_call(date, fcst_hr, data_type, ens_n=None):
    """Defines call for request based on above arguments

    Data request runs on 'data_type' switch with pre-defined templates for
    requests based on data types.  Ensemble index ens_n is only needed
    for gep data, not control solution.
    """

    down_dir = DATA_ROOT + '/' + date.strftime('%Y%m%d')
    os.system('mkdir -p ' + down_dir)

    if data_type == 'gep_pl':
        # perturbation pressure level data
        target = down_dir + '/gep' + ens_n + '.t' + date.strftime('%H') +\
                'z.pgrb_pl.0p50.f' + fcst_hr.zfill(3)
        req = {
               'class': 'ti',
               'dataset': 'tigge',
               'date': date.strftime('%Y-%m-%d'),
               'expver': 'prod',
               'grid': '0.5/0.5',
               'levelist': '200/250/300/500/700/850/925/1000',
               'levtype': 'pl',
               'number': ens_n,
               'origin': 'kwbc',
               'param': '130/131/132/133/156',
               'step': fcst_hr,
               'target': target,
               'time': date.strftime('%H:%M:%S'),
               'type': 'pf',
              }

        return req
    
    elif data_type == 'gep_sl': 
        # perturbation surface level data
        target = down_dir + '/gep' + ens_n + '.t' + date.strftime('%H') +\
                'z.pgrb_sl.0p50.f' + fcst_hr.zfill(3)
        req = {
               'class': 'ti',
               'dataset': 'tigge',
               'date': date.strftime('%Y-%m-%d'),
               'expver': 'prod',
               'grid': '0.5/0.5',
               'levtype': 'sfc',
               'number': ens_n,
               'origin': 'kwbc',
               'param': '134/151/165/166/167/168/235/228039/228139/228144',
               'step': fcst_hr,
               'target': target,
               'time': date.strftime('%H:%M:%S'),
               'type': 'pf',
              }

        return req

    elif data_type == 'gep_st':
        # perturbation static data
        target = down_dir + '/gep' + ens_n + '.t' + date.strftime('%H') +\
                'z.pgrb_st.0p50.f' + fcst_hr.zfill(3)
        req = {
               'class': 'ti',
               'dataset': 'tigge',
               'date': date.strftime('%Y-%m-%d'),
               'expver': 'prod',
               'grid': '0.5/0.5',
               'levtype': 'sfc',
               'number': ens_n,
               'origin': 'kwbc',
               'param': '228002',
               'step': '0',
               'time': '00:00:00',
               'type': 'pf',
               'target': target,
              }

        return req

    elif data_type == 'gep_lm':
        # perturbation landmask
        target = down_dir + '/gep' + ens_n + '.t' + date.strftime('%H') +\
                'z.pgrb_lm.0p50.f' + fcst_hr.zfill(3)
        req = {
               'class': 'ti',
               'dataset': 'tigge',
               'date': date.strftime('%Y-%m-%d'),
               'expver': 'prod',
               'grid': '0.5/0.5',
               'levtype': 'sfc',
               'number': ens_n,
               'origin': 'kwbc',
               'param': '172',
               'step': '6',
               'time': '00:00:00',
               'type': 'pf',
               'target': target,
              }

        return req

    elif data_type == 'gec_pl':
        # control pressure level
        target = down_dir + '/gec' + ens_n + '.t' + date.strftime('%H') +\
                'z.pgrb_pl.0p50.f' + fcst_hr.zfill(3)
        req = {
               'class': 'ti',
               'dataset': 'tigge',
               'date': date.strftime('%Y-%m-%d'),
               'expver': 'prod',
               'grid': '0.5/0.5',
               'levelist': '200/250/300/500/700/850/925/1000',
               'levtype': 'pl',
               'origin': 'kwbc',
               'param': '130/131/132/133/156',
               'step': fcst_hr,
               'target': target,
               'time': date.strftime('%H:%M:%S'),
               'type': 'cf',
              }
 
    elif data_type == 'gec_sl':
        # control surface level
        target = down_dir + '/gec' + ens_n + '.t' + date.strftime('%H') +\
                'z.pgrb_pl.0p50.f' + fcst_hr.zfill(3)
        req = {
               'class': 'ti',
               'dataset': 'tigge',
               'date': date.strftime('%Y-%m-%d'),
               'expver': 'prod',
               'grid': '0.5/0.5',
               'levtype': 'sfc',
               'origin': 'kwbc',
               'param': '134/151/165/166/167/168/235/228039/228139/228144',
               'step': fcst_hr,
               'target': target,
               'time': date.strftime('%H:%M:%S'),
               'type': 'cf',
              }

        return req
 
##################################################################################
# Download data
##################################################################################
server = ECMWFDataServer()
 
# obtain combinations
date_reqs, fcst_reqs = get_reqs(start_date, end_date, FCST_INT,
                                CYCLE_INT, MAX_FCST)

req_list = []

# make requests
for date in date_reqs:
    print('Downloading GEFS Date ' + date.strftime('%Y-%m-%d') + '\n')
    print('Zero Hour ' + date.strftime('%H') + '\n')

    for fcst in fcst_reqs:
        req_list.append()

map(server.retrieve, req_list)

