#!EmPy
##################################################################################
# PYTHON IMPORTS
##################################################################################
@{ import os}

##################################################################################
# CONTROL FLOW NAME / TUNABLE SETTINGS
##################################################################################
# Define the valid date YYYY-MM-DDTHH for verification
@{ EXP_VRF = '2022-12-28T00' }

# Define the name of case study
@{ CSE_NME = 'valid_date_' + EXP_VRF }

# Configuration name including tunable parameters
@{ CFG_NME = 'WRF_9_WestCoast' }

# Case / configuration structure
@{ EXP_NME = CSE_NME + '/' + CFG_NME }

##################################################################################
# CYCLING SETTINGS
##################################################################################
# First initial time for a forecast YYYY-MM-DDTHH
@{ CYC_STRT = '2022-12-23T00' }

# Last initial time for a forecast YYYY-MM-DDTHH
@{ CYC_STOP = '2022-12-27T00' }

# Interval between cycle start times PTXXH
@{ CYC_INC = 'PT24H' }

##################################################################################
# Ensemble SETTINGS
##################################################################################
# Define the ensemble size
@{ ENS_MAX = 1 }

# GFS and GEFS currently supported
@{ ENS_BKG_DATA = 'GEFS' }

# Data file frequency for ensemble simulation forcing in HH
@{ ENS_BKG_INT = '03' }

# Max domain for ensemble simulation 
@{ WRF_ENS_DOM = '01'}

# First domain index to have ICs downscaled from parent's initial conditions (>01)
@{ DOWN_DOM = '02'}

##################################################################################
# WRF SETTINGS
##################################################################################
# Output interval for history files in HH, suppressed = 00
@{ HIST_INT = '03' }

# Output interval for restart files in HH, suppressed = 00
@{ RSTRT_INT = '24' }

# Forecast lengths are defined to a specified verification valid date
@{ IF_DYN_LEN = 'Yes' }

# This setting defines Yes / No for nested domain 2-way coupling
@{ IF_FEEDBACK = 'No' }

# Lower boundary condition updates from background data
@{ IF_SST_UPDT = 'No' }

# Quilting tasks per group, set NIO_TPG=0 for default TURN OFF QUILTING
@{ NIO_TPG = 0 }

# Quilting number of groups
@{ NIO_GRPS = 4 }

##################################################################################
# JOB SETTINGS
##################################################################################
# Compute queue for standard mpi jobs
@{ PART_CMP = 'cw3e-compute' }

# Debug queue for small / rapid parallel jobs
@{ PART_DBG = 'cw3e-compute' }

# Serial queue for non-mpi jobs
@{ PART_SRL = 'cw3e-shared' }

# ungrib mem argument
@{ GRIB_MEM = '20000M' }

# Wallclock limit for ungrib jobs
@{ GRIB_WC = 'PT30M' }

# WPS parallel / REAL number of procs-per-node
@{ WPS_PROC = 64 }

# WPS mem argument 
@{ WPS_MEM = '249000M' }

# Number of nodes for WPS parallel / REAL jobs
@{ WPS_NDES = 1}

# Wallclock limit for init_atmosphere jobs
@{ WPS_WC = 'PT30M' }

# WRF model number of procs-per-node
@{ WRF_PROC = 128 }

# WRF model mem argument
@{ WRF_MEM = '249000M' }

# Number of nodes for WRF model jobs
@{ WRF_NDES = 3 }

# Wallclock limit for WRF model
@{ WRF_WC = 'PT2H30M' }

# Set workflow to debugging mode for generating batch submit templates
@{ IF_DBG = 'No' }

##################################################################################
# CYLC SETTINGS
##################################################################################
[scheduler]
    UTC mode = True
    allow implicit tasks = True
[scheduling]
    initial cycle point = @(CYC_STRT)
    final cycle point = @(CYC_STOP)
    [[graph]]
        @(CYC_INC) = """
        @[ for mem in range(0,ENS_MAX) ]
            @{ idx = str(mem).zfill(2) }
            ungrib_ens_@(idx)  => wrf_metgrid_ens_@(idx)
            wrf_metgrid_ens_@(idx) => wrf_real_ens_@(idx)
            wrf_real_ens_@(idx) => wrf_model_ens_@(idx)
        @[ end for ]
        """
[runtime]
    [[root]]
        [[[environment]]]
            CNST = @(os.environ['WRF_CNST'])
            EXP_NME = @(EXP_NME)
            EXP_VRF = $(isodatetime @(EXP_VRF) --f '%Y%m%d%H')
            CFG_ROOT = @(os.environ['CFG_ROOT'])
            CYC_DT = $(isodatetime ${CYLC_TASK_CYCLE_POINT} --f '%Y%m%d%H')
            CYC_HME = @(os.environ['WORK_ROOT'])/@(EXP_NME)/$CYC_DT
            STRT_DT = $CYC_DT
            BKG_DATA = @(ENS_BKG_DATA)
            IF_DYN_LEN = @(IF_DYN_LEN)
            IF_SST_UPDT = @(IF_SST_UPDT)
            IF_RGNL = 'Yes'
            MAX_DOM = @(WRF_ENS_DOM)
            MPIRUN = @(os.environ['MPIRUN'])
            IF_DBG_SCRPT = @(IF_DBG)
            SCHED = @(os.environ['SCHED'])

    [[WPS]]
        [[[environment]]]
            WPS_ROOT = @(os.environ['WPS_ROOT'])
            IF_ECMWF_ML = 'No'
            BKG_INT = @(ENS_BKG_INT)

    [[WRF]]
        [[[environment]]]
            WRF_ROOT = @(os.environ['WRF_ROOT'])

    @[ for mem in range(0,ENS_MAX) ]
        @{ idx = str(mem).zfill(2) }
        [[ungrib_ens_@(idx)]]
            inherit = WPS
            platform = @(os.environ['SCHED'])
            execution time limit = @(GRIB_WC)
            script = @(os.environ['DRIVERS'])/ungrib.sh
            execution retry delays = 3*PT5M
            [[[environment]]]
                MEMID = @(idx)
                GRIB_ROOT = @(os.environ['GRIB_ROOT'])
                BKG_STRT_DT = $CYC_DT
                IF_SST_UPDT = @(IF_SST_UPDT)
            [[[directives]]]
                @[ if os.environ['SCHED'] == 'slurm' ]
                    @[ if os.environ['SYS_TYPE' ] == 'penguin' ]
                        --partition = general
                        --qos = @(PART_SRL)
                        --nodes = 1
                        --ntasks-per-node = 1
                        --mem = @(GRIB_MEM)
                    @[ else ]
                        --partition = @(PART_SRL)
                        --nodes = 1
                        --ntasks-per-node = 1
                        --mem = @(GRIB_MEM)
                    @[ end if ]
                @[ elif os.environ['SCHED'] == 'pbs' ]
                    -q = @(PART_SRL)
                    -l select=1:mpiprocs=1:ncpus=1
                @[ end if ]

        [[wrf_metgrid_ens_@(idx)]]
            inherit = WPS
            platform = @(os.environ['SCHED'])
            execution time limit = @(WPS_WC)
            script = @(os.environ['DRIVERS'])/wrf_metgrid.sh
            execution retry delays = 3*PT5M
            [[[environment]]]
                MEMID = @(idx)
                N_NDES = @(WPS_NDES)
                N_PROC = @(WPS_PROC)
            [[[directives]]]
                @[ if os.environ['SCHED'] == 'slurm' ]
                    @[ if os.environ['SYS_TYPE' ] == 'penguin' ]
                        --partition = general
                        --qos = @(PART_DBG)
                        --nodes = @(WPS_NDES)
                        --ntasks-per-node = @(WPS_PROC)
                        --mem = @(WPS_MEM)
                    @[ else ]
                        --partition = @(PART_DBG)
                        --nodes = @(WPS_NDES)
                        --ntasks-per-node = @(WPS_PROC)
                        --mem = @(WPS_MEM)
                    @[ end if ]
                @[ elif os.environ['SCHED'] == 'pbs' ]
                    -q = @(PART_DBG)
                    -l select=@(WPS_NDES):mpiprocs=@(WPS_PROC):ncpus=@(WPS_PROC)
                @[ end if ]

        [[wrf_real_ens_@(idx)]]
            inherit = WPS
            platform = @(os.environ['SCHED'])
            execution time limit = @(WPS_WC)
            script = @(os.environ['DRIVERS'])/wrf_real.sh
            execution retry delays = 3*PT5M
            [[[environment]]]
                MEMID = @(idx)
                N_NDES = @(WPS_NDES)
                N_PROC = @(WPS_PROC)
                NIO_GRPS = @(NIO_GRPS)
                NIO_TPG = @(NIO_TPG)
            [[[directives]]]
                @[ if os.environ['SCHED'] == 'slurm' ]
                    @[ if os.environ['SYS_TYPE' ] == 'penguin' ]
                        --partition = general
                        --qos = @(PART_DBG)
                        --nodes = @(WPS_NDES)
                        --ntasks-per-node = @(WPS_PROC)
                        --mem = @(WPS_MEM)
                    @[ else ]
                        --partition = @(PART_DBG)
                        --nodes = @(WPS_NDES)
                        --ntasks-per-node = @(WPS_PROC)
                        --mem = @(WPS_MEM)
                    @[ end if ]
                @[ elif os.environ['SCHED'] == 'pbs' ]
                    -q = @(PART_DBG)
                    -l select=@(WPS_NDES):mpiprocs=@(WPS_PROC):ncpus=@(WPS_PROC)
                @[ end if ]

        [[wrf_model_ens_@(idx)]]
            platform = @(os.environ['SCHED'])
            execution time limit = @(WRF_WC)
            script = @(os.environ['DRIVERS'])/wrf_model.sh
            execution retry delays = 3*PT5M
            [[[environment]]]
                MEMID = @(idx)
                HIST_INT = @(HIST_INT)
                RSTRT_INT = @(RSTRT_INT)
                BKG_INT = @(ENS_BKG_INT)
                IF_RSTRT = 'No'
                IF_SST_UPDT = @(IF_SST_UPDT)
                CYC_INC = 00
                DOWN_DOM = @(DOWN_DOM)
                WRF_IC = 'REALEXE'
                IF_FEEDBACK = @(IF_FEEDBACK)
                N_NDES = @(WRF_NDES)
                N_PROC = @(WRF_PROC)
                NIO_GRPS = @(NIO_GRPS)
                NIO_TPG = @(NIO_TPG)

            [[[directives]]]
                @[ if os.environ['SCHED'] == 'slurm' ]
                    @[ if os.environ['SYS_TYPE' ] == 'penguin' ]
                        --partition = general
                        --qos = @(PART_CMP)
                        --nodes = @(WRF_NDES)
                        --ntasks-per-node = @(WRF_PROC)
                        --mem = @(WRF_MEM)
                    @[ else ]
                        --partition = @(PART_CMP)
                        --nodes = @(WRF_NDES)
                        --ntasks-per-node = @(WRF_PROC)
                        --mem = @(WRF_MEM)
                    @[ end if ]
                @[ elif os.environ['SCHED'] == 'pbs' ]
                    -q = @(PART_CMP)
                    -l select=@(WRF_NDES):mpiprocs=@(WRF_PROC):ncpus=@(WRF_PROC)
                @[ end if ]

    @[ end for ]
