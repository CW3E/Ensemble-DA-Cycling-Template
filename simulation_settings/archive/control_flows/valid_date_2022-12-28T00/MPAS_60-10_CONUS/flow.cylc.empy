#!EmPy
##################################################################################
# PYTHON IMPORTS
##################################################################################
@{ import os}

##################################################################################
# CONTROL FLOW NAME / TUNABLE SETTINGS
##################################################################################
# Define the valid date YYYY-MM-DDTHH for verification
@{ EXP_VRF = '2022-12-28T00' }

# Define the name of case study
@{ CSE_NME = 'valid_date_' + EXP_VRF }

# Configuration name including tunable parameters
@{ CFG_NME = 'MPAS_60-10_CONUS' }

# Case / configuration structure
@{ EXP_NME = CSE_NME + '/' + CFG_NME }

# Define the MPAS mesh name
@{ MSH_NME = 'x6.999426' }

##################################################################################
# CYCLING SETTINGS
##################################################################################
# First initial time for a forecast YYYY-MM-DDTHH
@{ CYC_STRT = '2022-12-23T00' }

# Last initial time for a forecast YYYY-MM-DDTHH
@{ CYC_STOP = '2022-12-27T00' }

# Interval between cycle start times PTXXH
@{ CYC_INC = 'PT24H' }

##################################################################################
# Ensemble SETTINGS
##################################################################################
# Define the ensemble size
@{ ENS_MAX = 1 }

# GFS and GEFS currently supported
@{ ENS_BKG_DATA = 'GEFS' }

# Data file frequency for ensemble simulation forcing in HH
@{ ENS_BKG_INT = '03' }

##################################################################################
# MPAS SETTINGS
##################################################################################
# Output interval for history files in HH, suppressed = 00
@{ HIST_INT = '03' }

# Output interval for diagnostic files in HH, suppressed = 00
@{ DIAG_INT = '03' }

# Output interval for sounding files in HH, suppressed = 00
@{ SND_INT = '00' }

# Output interval for restart files in HH, suppressed = 00
@{ RSTRT_INT = '24' }

# Define if MPAS is run in regional mode
@{ IF_RGNL = 'No' }

# Forecast lengths are defined to a specified verification valid date
@{ IF_DYN_LEN = 'Yes' }

# Lower boundary condition updates from background data
@{ IF_SST_UPDT = 'No' }

# Diurnal updates to lower boundary conditions
@{ IF_SST_DIURN = 'No' }

# Slowly varying deep soil temperatures
@{ IF_DEEPSOIL = 'No' }

# If zeta levels are explicitly set
@{ IF_ZETA_LIST = 'Yes' }

# Number of tasks devoted to IO, set to 0 for all tasks run IO
@{ PIO_NUM = 0 }

# Parallel IO stride
@{ PIO_STRD = 1 }

##################################################################################
# JOB SETTINGS
##################################################################################
# Compute queue for standard mpi jobs
@{ PART_CMP = 'cw3e-compute' }

# Debug queue for small / rapid parallel jobs
@{ PART_DBG = 'cw3e-shared' }

# Serial queue for non-mpi jobs
@{ PART_SRL = 'cw3e-shared' }

# ungrib mem argument
@{ GRIB_MEM = '20000M' }

# Wallclock limit for ungrib jobs
@{ GRIB_WC = 'PT30M' }

# init_atmosphere number of procs-per-node
@{ INIT_PROC = 64 }

# init_atmosphere mem argument
@{ INIT_MEM = '249000M' }

# Number of nodes for init_atmosphere
@{ INIT_NDES = 1}

# Wallclock limit for init_atmosphere jobs
@{ INIT_WC = 'PT30M' }

# atmosphere_model number of procs-per-node
@{ MPAS_PROC = 128 }

# atmosphere_model mem argument
@{ MPAS_MEM = '249000M' }

# Number of nodes for atmosphere_model jobs
@{ MPAS_NDES = 5 }

# Wallclock limit for atmosphere_model
@{ MPAS_WC = 'PT6H' }

# Set workflow to debugging mode for generating batch submit templates
@{ IF_DBG = 'No' }

##################################################################################
# CYLC SETTINGS
##################################################################################
[scheduler]
    UTC mode = True
    allow implicit tasks = True
[scheduling]
    initial cycle point = @(CYC_STRT)
    final cycle point = @(CYC_STOP)
    [[graph]]
        @(CYC_INC) = """
        @[ for mem in range(0,ENS_MAX) ]
            @{ idx = str(mem).zfill(2) }
            ungrib_ens_@(idx)  => mpas_ic_ens_@(idx)
            mpas_ic_ens_@(idx) => mpas_model_ens_@(idx)
        @[ end for ]
        """
[runtime]
    [[root]]
        [[[environment]]]
            EXP_NME = @(EXP_NME)
            EXP_VRF = $(isodatetime @(EXP_VRF) --f '%Y%m%d%H')
            CFG_ROOT = @(os.environ['CFG_ROOT'])
            CYC_DT = $(isodatetime ${CYLC_TASK_CYCLE_POINT} --f '%Y%m%d%H')
            CYC_HME = @(os.environ['WORK_ROOT'])/@(EXP_NME)/$CYC_DT
            STRT_DT = $CYC_DT
            IF_DYN_LEN = @(IF_DYN_LEN)
            IF_SST_UPDT = @(IF_SST_UPDT)
            IF_RGNL = @(IF_RGNL)
            MPIRUN = @(os.environ['MPIRUN'])
            IF_DBG_SCRPT = @(IF_DBG)
            SCHED = @(os.environ['SCHED'])

    [[WPS]]
        [[[environment]]]
            CNST = @(os.environ['WRF_CNST'])
            WPS_ROOT = @(os.environ['WPS_ROOT'])

    [[MPAS]]
        [[[environment]]]
            CNST = @(os.environ['MPAS_CNST'])
            MPAS_ROOT = @(os.environ['MPAS_ROOT'])
            MSH_NME = @(MSH_NME)

    @[ for mem in range(0,ENS_MAX) ]
        @{ idx = str(mem).zfill(2) }
        [[ungrib_ens_@(idx)]]
            inherit = WPS
            platform = @(os.environ['SCHED'])_platform
            execution time limit = @(GRIB_WC)
            script = @(os.environ['DRIVERS'])/ungrib.sh
            execution retry delays = 3*PT5M
            [[[environment]]]
                MEMID = @(idx)
                GRIB_ROOT = @(os.environ['GRIB_ROOT'])
                BKG_STRT_DT = $CYC_DT
                IF_SST_UPDT = @(IF_SST_UPDT)
                BKG_DATA = @(ENS_BKG_DATA)
                BKG_INT = @(ENS_BKG_INT)
                IF_ECMWF_ML = 'No'
            [[[directives]]]
                @[ if os.environ['SCHED'] == 'slurm' ]
                    --partition = @(PART_SRL)
                    --nodes = 1
                    --tasks-per-node = 1
                    --mem = @(GRIB_MEM)
                @[ elif os.environ['SCHED'] == 'pbs' ]
                    -l select=1:mpiprocs=1:ncpus=1
                @[ end if ]

        [[mpas_ic_ens_@(idx)]]
            inherit = MPAS
            platform = @(os.environ['SCHED'])_platform
            execution time limit = @(INIT_WC)
            script = @(os.environ['DRIVERS'])/mpas_ic.sh
            execution retry delays = 3*PT5M
            [[[environment]]]
                MEMID = @(idx)
                IF_ZETA_LIST = @(IF_ZETA_LIST)
                BKG_DATA = @(ENS_BKG_DATA)
                N_NDES = @(INIT_NDES)
                N_PROC = @(INIT_PROC)
                PIO_NUM = @(PIO_NUM)
                PIO_STRD = @(PIO_STRD)
            [[[directives]]]
                @[ if os.environ['SCHED'] == 'slurm' ]
                    --partition = @(PART_CMP)
                    --nodes = @(INIT_NDES)
                    --tasks-per-node = @(INIT_PROC)
                    --mem = @(INIT_MEM)
                @[ elif os.environ['SCHED'] == 'pbs' ]
                    -l select=@(INIT_NDES)
                    -l mpiprocs=@(INIT_PROC)
                    -l ncpus=@(INIT_PROC)
                @[ end if ]

        [[mpas_model_ens_@(idx)]]
            inherit = MPAS
            platform = @(os.environ['SCHED'])_platform
            execution time limit = @(MPAS_WC)
            script = @(os.environ['DRIVERS'])/mpas_model.sh
            execution retry delays = 3*PT5M
            [[[environment]]]
                MEMID = @(idx)
                DIAG_INT = @(DIAG_INT)
                HIST_INT = @(HIST_INT)
                SND_INT = @(SND_INT)
                RSTRT_INT = @(RSTRT_INT)
                BKG_INT = @(ENS_BKG_INT)
                IF_RSTRT = 'No'
                IF_DA = 'No'
                IF_SST_UPDT = @(IF_SST_UPDT)
                IF_SST_DIURN = @(IF_SST_DIURN)
                IF_DEEPSOIL = @(IF_DEEPSOIL)
                N_NDES = @(MPAS_NDES)
                N_PROC = @(MPAS_PROC)
                PIO_NUM = @(PIO_NUM)
                PIO_STRD = @(PIO_STRD)
            [[[directives]]]
                @[ if os.environ['SCHED'] == 'slurm' ]
                    --partition = @(PART_CMP)
                    --nodes = @(MPAS_NDES)
                    --tasks-per-node = @(MPAS_PROC)
                    --mem = @(MPAS_MEM)
                @[ elif os.environ['SCHED'] == 'pbs' ]
                    -l select=@(MPAS_NDES)
                    -l mpiprocs=@(MPAS_PROC)
                    -l ncpus=@(MPAS_PROC)
                @[ end if ]

    @[ end for ]
