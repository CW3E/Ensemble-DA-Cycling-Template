#!EmPy
##################################################################################
# PYTHON IMPORTS
##################################################################################
@{ import os }


##################################################################################
# CONTROL FLOW NAME / TUNABLE SETTINGS
##################################################################################
# Define the valid date YYYYMMDDHH for verification
@{ EXP_VRF = '2022122800' }

# Define the MPAS mesh name
@{ MSH_NME = 'x1.10242' }

# Define the name of case study / experiment group
@{ CSE_NME = {{EXP_VRF}}_valid_date }

# Configuration name including tunable parameters
@{ CFG_NME = 'MPAS_240-U' }

# Experiment logs and data are defined in the case / configuration nested structure
@{ EXP_NME =  }

##################################################################################
# CYCLING SETTINGS
##################################################################################
# First initial time for a forecast YYYY-MM-DDTHH
@{ CYC_STRT = '2022-12-23T00' }

# Last initial time for a forecast YYYY-MM-DDTHH
@{ CYC_STOP = '2022-12-27T00' }

# Interval between cycle start times PTXXH
@{ CYC_INC = 'PT24H' }

##################################################################################
# Ensemble SETTINGS
##################################################################################
# Define the ensemble size
@{ ENS_MAX = 3 }

# GFS and GEFS currently supported
@{ ENS_BKG_DATA = 'GEFS' }

# Data file frequency for ensemble simulation forcing in HH
@{ ENS_BKG_INT = '03' }

##################################################################################
# MPAS SETTINGS
##################################################################################
# Output interval for history files in HH, suppressed = 00
@{ HIST_INT = '03' }

# Output interval for diagnostic files in HH, suppressed = 00
@{ DIAG_INT = '03' }

# Output interval for sounding files in HH, suppressed = 00
@{ SND_INT = '00' }

# Output interval for restart files in HH, suppressed = 00
@{ RSTRT_INT = '24' }

# Define if MPAS is run in regional mode
@{ IF_RGNL = 'No' }

# Forecast lengths are defined to a specified verification valid date
@{ IF_DYN_LEN = 'Yes' }

# Lower boundary condition updates from background data
@{ IF_SST_UPDT = 'No' }

# Diurnal updates to lower boundary conditions
@{ IF_SST_DIURN = 'No' }

# Slowly varying deep soil temperatures
@{ IF_DEEPSOIL = 'No' }

# If zeta levels are explicitly set
@{ IF_ZETA_LIST = 'Yes' }

# Number of tasks devoted to IO, set to 0 for all tasks run IO
@{ PIO_NUM = '0' }

# Parallel IO stride
@{ PIO_STRD = '1' }

##################################################################################
# JOB SETTINGS
##################################################################################
# Compute queue for standard mpi jobs
@{ PART_CMP = 'cw3e-compute'}

# Debug queue for small / rapid parallel jobs
@{ PART_DBG = 'cw3e-shared'}

# Serial queue for non-mpi jobs
@{ PART_SRL = 'cw3e-shared'}

# ungrib mem-per-cpu argument
@{ GRIB_MEM = '20000M'}

# Wallclock limit for ungrib jobs
@{ GRIB_WC = 'PT30M'}

# init_atmosphere number of procs-per-node
@{ INIT_PROC = '64'}

# init_atmosphere mem-per-cpu argument
@{ INIT_MEM = '249000M'}

# Number of nodes for init_atmosphere
@{ INIT_NDES = '1'}

# Wallclock limit for init_atmosphere jobs
@{ INIT_WC = 'PT30M'}

# atmosphere_model number of procs-per-node
@{ MPAS_PROC = '64'}

# atmosphere_model mem-per-cpu argument
@{ MPAS_MEM = '249000M'}

# Number of nodes for atmosphere_model jobs
@{ MPAS_NDES = '1'}

# Wallclock limit for atmosphere_model
@{ MPAS_WC = 'PT30M'}

# Set workflow to debugging mode for generating batch submit templates
@{ IF_DBG = 'No' }

##################################################################################
# CYLC SETTINGS
##################################################################################
[scheduler]
    UTC mode = True
    allow implicit tasks = True
[scheduling]
    initial cycle point = {{CYC_STRT}}
    final cycle point = {{CYC_STOP}}
    [[graph]]
        {{CYC_INC}} = """
        @[ for mem in range(0,ENS_MAX) ]
            %{ idx = mem | pad(2,'0') }
            ungrib_ens_{{idx}}  => mpas_ic_ens_{{idx}}
            mpas_ic_ens_{{idx}} => mpas_model_ens_{{idx}}
        @[ endfor ]
        """
[runtime]
    [[root]]
        [[[environment]]]
            EXP_NME = {{CSE_NME}}/{{CFG_NME}}
            EXP_VRF = {{EXP_VRF}}
            CFG_ROOT = {{environ['CFG_ROOT']}}
            CYC_DT = $(isodatetime ${CYLC_TASK_CYCLE_POINT} --f '%Y%m%d%H')
            CYC_HME = {{environ['WORK_ROOT']}}/{{CSE_NME}}/{{CFG_NME}}/$CYC_DT
            STRT_DT = $CYC_DT
            IF_DYN_LEN = {{IF_DYN_LEN}}
            IF_SST_UPDT = {{IF_SST_UPDT}}
            IF_RGNL = {{IF_RGNL}}
            MPI_RUN = {{environ['MPI_RUN']}}
            IF_DBG_SCRPT = 'Yes'
            SCHED = {{environ['SCHED']}}

    [[WPS]]
        [[[environment]]]
            CNST = {{environ['WRF_CNST']}}
            WPS_ROOT = {{environ['WPS_ROOT']}}

    [[MPAS]]
        [[[environment]]]
            CNST = {{environ['MPAS_CNST']}}
            MPAS_ROOT = {{environ['MPAS_ROOT']}}
            MSH_NME = {{MSH_NME}}

    @[ for mem in range(0,ENS_MAX) ]
        %{ idx = mem | pad(2,'0') }
        [[ungrib_ens_{{idx}}]]
            inherit = WPS
            platform = {{environ['SCHED']}}_platform
            execution time limit = {{GRIB_WC}}
            script = {{environ['DRIVERS']}}/ungrib.sh
            [[[environment]]]
                MEMID = {{idx}}
                GRIB_ROOT = {{environ['GRIB_ROOT']}}
                BKG_STRT_DT = $CYC_DT
                IF_SST_UPDT = {{IF_SST_UPDT}}
                BKG_DATA = {{ENS_BKG_DATA}}
                BKG_INT = {{ENS_BKG_INT}}
                IF_ECMWF_ML = 'No'
            [[[directives]]]
                @[ if environ['SCHED'] == 'slurm' ]
                    --partition = {{PART_SRL}}
                    --nodes = 1
                    --tasks-per-node = 1
                    --mem={{GRIB_MEM}}
                @[ elif environ['SCHED'] == 'pbs' ]
                    -l select=1:mpiprocs=1:ncpus=1
                @[ endif ]

        [[mpas_ic_ens_{{idx}}]]
            inherit = MPAS
            platform = {{environ['SCHED']}}_platform
            execution time limit = {{INIT_WC}}
            script = {{environ['DRIVERS']}}/mpas_ic.sh
            [[[environment]]]
                MEMID = {{idx}}
                IF_ZETA_LIST = {{IF_ZETA_LIST}}
                BKG_DATA = {{ENS_BKG_DATA}}
                MPIRUN = $MPIRUN
                N_NDES = {{INIT_NDES}}
                N_PROC = {{INIT_PROC}}
                PIO_NUM = {{PIO_NUM}}
                PIO_STRD = {{PIO_STRD}}
            [[[directives]]]
                @[ if environ['SCHED'] == 'slurm' ]
                    --partition = {{PART_CMP}}
                    --nodes = {{INIT_NDES}}
                    --tasks-per-node = {{INIT_PROC}}
                    --mem={{INIT_MEM}}
                @[ elif environ['SCHED'] == 'pbs' ]
                    -l select={{INIT_NDES}}
                    -l mpiprocs={{INIT_PROC}}
                    -l ncpus={{INIT_PROC}}
                @[ endif ]

        [[mpas_model_ens_{{idx}}]]
            inherit = MPAS
            platform = {{environ['SCHED']}}_platform
            execution time limit = {{MPAS_WC}}
            script = {{environ['DRIVERS']}}/mpas_model.sh
            [[[environment]]]
                CNST = {{environ['MPAS_CNST']}}
                MEMID = {{idx}}
                DIAG_INT = {{DIAG_INT}}
                HIST_INT = {{HIST_INT}}
                SND_INT = {{SND_INT}}
                RSTRT_INT = {{RSTRT_INT}}
                BKG_INT = {{ENS_BKG_INT}}
                IF_RSTRT = 'No'
                IF_DA = 'No'
                IF_SST_UPDT = {{IF_SST_UPDT}}
                IF_SST_DIURN = {{IF_SST_DIURN}}
                IF_DEEPSOIL = {{IF_DEEPSOIL}}
                MPIRUN = $MPIRUN
                N_NDES = {{MPAS_NDES}}
                N_PROC = {{MPAS_PROC}}
                PIO_NUM = {{PIO_NUM}}
                PIO_STRD = {{PIO_STRD}}
            [[[directives]]]
                @[ if environ['SCHED'] == 'slurm' ]
                    --partition = {{PART_CMP}}
                    --nodes = {{MPAS_NDES}}
                    --tasks-per-node = {{MPAS_PROC}}
                    --mem = {{MPAS_MEM}}
                @[ elif environ['SCHED'] == 'pbs' ]
                    -l select={{MPAS_NDES}}
                    -l mpiprocs={{MPAS_PROC}}
                    -l ncpus={{MPAS_PROC}}
                @[ endif ]

    @[ endfor ]
